From 4dc8b8ebd748964a31f7be826c2e20d99d018b86 Mon Sep 17 00:00:00 2001
From: Christophe Fergeau <cfergeau@redhat.com>
Date: Fri, 6 Jan 2023 10:22:30 +0100
Subject: [PATCH 01/16] macos: Remove TrayExecutablePath()

The code using it was removed in commit
d3b9f1d672d01a9e09c5f900e870fce2155705fb
---
 pkg/crc/constants/constants_darwin.go | 10 ----------
 1 file changed, 10 deletions(-)

diff --git a/pkg/crc/constants/constants_darwin.go b/pkg/crc/constants/constants_darwin.go
index a2c2b7d8e..f5bd77e09 100644
--- a/pkg/crc/constants/constants_darwin.go
+++ b/pkg/crc/constants/constants_darwin.go
@@ -2,8 +2,6 @@ package constants
 
 import (
 	"path/filepath"
-
-	"github.com/crc-org/crc/pkg/crc/version"
 )
 
 const (
@@ -18,11 +16,3 @@ var (
 	TapSocketPath        = filepath.Join(CrcBaseDir, "tap.sock")
 	DaemonHTTPSocketPath = filepath.Join(CrcBaseDir, "crc-http.sock")
 )
-
-func TrayExecutablePath() string {
-	if version.IsInstaller() {
-		return filepath.Clean(filepath.Join(version.InstallPath(), "..", "MacOS", "crc-tray"))
-	}
-	// Should not be reached, tray is only supported on installer builds
-	return filepath.Clean(filepath.Join(BinDir(), "Red Hat OpenShift Local"))
-}
-- 
2.39.0


From 52ee93ec7162f77b92f719eca56f36a6aa712774 Mon Sep 17 00:00:00 2001
From: Christophe Fergeau <cfergeau@redhat.com>
Date: Fri, 6 Jan 2023 11:48:57 +0100
Subject: [PATCH 02/16] constants: Add AdminHelperPath() function

---
 pkg/crc/adminhelper/hosts.go      | 6 ------
 pkg/crc/adminhelper/hosts_unix.go | 3 ++-
 pkg/crc/constants/constants.go    | 4 ++++
 3 files changed, 6 insertions(+), 7 deletions(-)

diff --git a/pkg/crc/adminhelper/hosts.go b/pkg/crc/adminhelper/hosts.go
index 3503a3ebf..c90d4dbc7 100644
--- a/pkg/crc/adminhelper/hosts.go
+++ b/pkg/crc/adminhelper/hosts.go
@@ -1,17 +1,11 @@
 package adminhelper
 
 import (
-	"path/filepath"
-
 	"github.com/crc-org/admin-helper/pkg/hosts"
 	"github.com/crc-org/admin-helper/pkg/types"
 	"github.com/crc-org/crc/pkg/crc/constants"
 )
 
-var (
-	BinPath = filepath.Join(constants.BinDir(), constants.GetAdminHelperExecutable())
-)
-
 // UpdateHostsFile updates the host's /etc/hosts file with Instance IP.
 func UpdateHostsFile(instanceIP string, hostnames ...string) error {
 	if err := RemoveFromHostsFile(hostnames...); err != nil {
diff --git a/pkg/crc/adminhelper/hosts_unix.go b/pkg/crc/adminhelper/hosts_unix.go
index ae3cc571c..c2c0845da 100644
--- a/pkg/crc/adminhelper/hosts_unix.go
+++ b/pkg/crc/adminhelper/hosts_unix.go
@@ -5,11 +5,12 @@ package adminhelper
 
 import (
 	"github.com/crc-org/admin-helper/pkg/types"
+	"github.com/crc-org/crc/pkg/crc/constants"
 	crcos "github.com/crc-org/crc/pkg/os"
 )
 
 func execute(args ...string) error {
-	_, _, err := crcos.RunWithDefaultLocale(BinPath, args...)
+	_, _, err := crcos.RunWithDefaultLocale(constants.AdminHelperPath(), args...)
 	return err
 }
 
diff --git a/pkg/crc/constants/constants.go b/pkg/crc/constants/constants.go
index 43f9c137d..9e38a1afe 100644
--- a/pkg/crc/constants/constants.go
+++ b/pkg/crc/constants/constants.go
@@ -142,6 +142,10 @@ func BinDir() string {
 	return crcBinDir
 }
 
+func AdminHelperPath() string {
+	return filepath.Join(BinDir(), GetAdminHelperExecutable())
+}
+
 // GetHomeDir returns the home directory for the current user
 func GetHomeDir() string {
 	homeDir, err := os.UserHomeDir()
-- 
2.39.0


From 8db20c687878554ea9d350ce9f8efd897a447344 Mon Sep 17 00:00:00 2001
From: Christophe Fergeau <cfergeau@redhat.com>
Date: Fri, 6 Jan 2023 14:44:10 +0100
Subject: [PATCH 03/16] vfkit: Add VfkitPath() helper

This will limit the amount of code using filepath.Join(BinDir(),
VfkitCommand).
---
 pkg/crc/cache/cache_darwin.go                |  4 +++-
 pkg/crc/machine/vfkit/constants.go           | 11 +++++++++--
 pkg/crc/machine/vfkit/driver_darwin.go       |  3 +--
 pkg/crc/preflight/preflight_checks_darwin.go |  5 +++--
 4 files changed, 16 insertions(+), 7 deletions(-)

diff --git a/pkg/crc/cache/cache_darwin.go b/pkg/crc/cache/cache_darwin.go
index d37396964..f1482390b 100644
--- a/pkg/crc/cache/cache_darwin.go
+++ b/pkg/crc/cache/cache_darwin.go
@@ -1,11 +1,13 @@
 package cache
 
 import (
+	"path/filepath"
+
 	"github.com/crc-org/crc/pkg/crc/machine/vfkit"
 )
 
 func NewVfkitCache() *Cache {
-	return New(vfkit.VfkitCommand, vfkit.VfkitDownloadURL, vfkit.VfkitVersion, getVfkitVersion)
+	return New(filepath.Base(vfkit.ExecutablePath()), vfkit.VfkitDownloadURL, vfkit.VfkitVersion, getVfkitVersion)
 }
 
 func getVfkitVersion(executablePath string) (string, error) {
diff --git a/pkg/crc/machine/vfkit/constants.go b/pkg/crc/machine/vfkit/constants.go
index ba2f611ef..67e5cb15f 100644
--- a/pkg/crc/machine/vfkit/constants.go
+++ b/pkg/crc/machine/vfkit/constants.go
@@ -5,13 +5,20 @@ package vfkit
 
 import (
 	"fmt"
+	"path/filepath"
+
+	"github.com/crc-org/crc/pkg/crc/constants"
 )
 
 const (
 	VfkitVersion = "0.0.4"
-	VfkitCommand = "vfkit"
+	vfkitCommand = "vfkit"
 )
 
 var (
-	VfkitDownloadURL = fmt.Sprintf("https://github.com/crc-org/vfkit/releases/download/v%s/%s", VfkitVersion, VfkitCommand)
+	VfkitDownloadURL = fmt.Sprintf("https://github.com/crc-org/vfkit/releases/download/v%s/%s", VfkitVersion, vfkitCommand)
 )
+
+func ExecutablePath() string {
+	return filepath.Join(constants.BinDir(), vfkitCommand)
+}
diff --git a/pkg/crc/machine/vfkit/driver_darwin.go b/pkg/crc/machine/vfkit/driver_darwin.go
index be6ae1cdd..2190561a1 100644
--- a/pkg/crc/machine/vfkit/driver_darwin.go
+++ b/pkg/crc/machine/vfkit/driver_darwin.go
@@ -2,7 +2,6 @@ package vfkit
 
 import (
 	"fmt"
-	"path/filepath"
 
 	"github.com/crc-org/crc/pkg/crc/constants"
 	"github.com/crc-org/crc/pkg/crc/machine/config"
@@ -19,7 +18,7 @@ func CreateHost(machineConfig config.MachineConfig) *vfkit.Driver {
 	vfDriver.Cmdline = machineConfig.KernelCmdLine
 	vfDriver.VmlinuzPath = machineConfig.Kernel
 	vfDriver.InitrdPath = machineConfig.Initramfs
-	vfDriver.VfkitPath = filepath.Join(constants.BinDir(), VfkitCommand)
+	vfDriver.VfkitPath = ExecutablePath()
 
 	vfDriver.VirtioNet = machineConfig.NetworkMode == network.SystemNetworkingMode
 
diff --git a/pkg/crc/preflight/preflight_checks_darwin.go b/pkg/crc/preflight/preflight_checks_darwin.go
index b75ea7ad7..bca21834d 100644
--- a/pkg/crc/preflight/preflight_checks_darwin.go
+++ b/pkg/crc/preflight/preflight_checks_darwin.go
@@ -12,6 +12,7 @@ import (
 	"github.com/crc-org/crc/pkg/crc/cache"
 	"github.com/crc-org/crc/pkg/crc/constants"
 	"github.com/crc-org/crc/pkg/crc/logging"
+	"github.com/crc-org/crc/pkg/crc/machine/vfkit"
 	"github.com/crc-org/crc/pkg/crc/version"
 	crcos "github.com/crc-org/crc/pkg/os"
 	"github.com/crc-org/crc/pkg/os/launchd"
@@ -134,7 +135,7 @@ func killVfkitProcess() error {
 	if err != nil {
 		return fmt.Errorf("Could not find 'pgrep'. %w", err)
 	}
-	if _, _, err := crcos.RunWithDefaultLocale(pgrepPath, "-f", filepath.Join(constants.BinDir(), "vfkit")); err != nil {
+	if _, _, err := crcos.RunWithDefaultLocale(pgrepPath, "-f", vfkit.ExecutablePath()); err != nil {
 		var exitErr *exec.ExitError
 		if errors.As(err, &exitErr) {
 			/* 1: no processes matched */
@@ -151,7 +152,7 @@ func killVfkitProcess() error {
 	if err != nil {
 		return fmt.Errorf("Could not find 'pkill'. %w", err)
 	}
-	if _, _, err := crcos.RunWithDefaultLocale(pkillPath, "-SIGKILL", "-f", filepath.Join(constants.BinDir(), "vfkit")); err != nil {
+	if _, _, err := crcos.RunWithDefaultLocale(pkillPath, "-SIGKILL", "-f", vfkit.ExecutablePath()); err != nil {
 		return fmt.Errorf("Failed to kill 'vfkit' process. %w", err)
 	}
 	return nil
-- 
2.39.0


From c70fdb72a1519d1eab6d2cc58fbb918e911b9d40 Mon Sep 17 00:00:00 2001
From: Christophe Fergeau <cfergeau@redhat.com>
Date: Tue, 10 Jan 2023 10:57:57 +0100
Subject: [PATCH 04/16] libvirt: Add MachineDriverPath()

---
 pkg/crc/machine/driver_linux.go      |  4 ++--
 pkg/crc/machine/libvirt/constants.go | 13 +++++++++++--
 2 files changed, 13 insertions(+), 4 deletions(-)

diff --git a/pkg/crc/machine/driver_linux.go b/pkg/crc/machine/driver_linux.go
index 413ea788c..b6f9b00ec 100644
--- a/pkg/crc/machine/driver_linux.go
+++ b/pkg/crc/machine/driver_linux.go
@@ -3,8 +3,8 @@ package machine
 import (
 	"encoding/json"
 	"errors"
+	"path/filepath"
 
-	"github.com/crc-org/crc/pkg/crc/constants"
 	"github.com/crc-org/crc/pkg/crc/machine/config"
 	"github.com/crc-org/crc/pkg/crc/machine/libvirt"
 	"github.com/crc-org/crc/pkg/libmachine"
@@ -18,7 +18,7 @@ func newHost(api libmachine.API, machineConfig config.MachineConfig) (*host.Host
 	if err != nil {
 		return nil, errors.New("Failed to marshal driver options")
 	}
-	return api.NewHost("libvirt", constants.BinDir(), json)
+	return api.NewHost("libvirt", filepath.Dir(libvirt.MachineDriverPath()), json)
 }
 
 /* FIXME: host.Host is only known here, and libvirt.Driver is only accessible
diff --git a/pkg/crc/machine/libvirt/constants.go b/pkg/crc/machine/libvirt/constants.go
index 9c505ea22..c7279f85b 100644
--- a/pkg/crc/machine/libvirt/constants.go
+++ b/pkg/crc/machine/libvirt/constants.go
@@ -3,7 +3,12 @@
 
 package libvirt
 
-import "fmt"
+import (
+	"fmt"
+	"path/filepath"
+
+	"github.com/crc-org/crc/pkg/crc/constants"
+)
 
 const (
 	// Defaults
@@ -21,5 +26,9 @@ const (
 )
 
 var (
-	MachineDriverDownloadURL = fmt.Sprintf("https://github.com/crc-org/machine-driver-libvirt/releases/download/%s/crc-driver-libvirt", MachineDriverVersion)
+	MachineDriverDownloadURL = fmt.Sprintf("https://github.com/crc-org/machine-driver-libvirt/releases/download/%s/%s", MachineDriverVersion, MachineDriverCommand)
 )
+
+func MachineDriverPath() string {
+	return filepath.Join(constants.BinDir(), MachineDriverCommand)
+}
-- 
2.39.0


From fe4eeac889c3929dda5b302e3935965ff621e958 Mon Sep 17 00:00:00 2001
From: Christophe Fergeau <cfergeau@redhat.com>
Date: Fri, 6 Jan 2023 13:28:12 +0100
Subject: [PATCH 05/16] cache: Pass full path to Cache.New()

The Cache package is a bit messy at the moment, as it handles both
the installer use-case, where we don't want to download anything, and
the 'built from git' use-case, where it will automatically download
files.
The difference between the 2 can be found in `EnsureIsCached()` which
will always return an error if IsInstaller() is true, and which will
download the binary if not.

The 'New()' interface is influenced by the 'download missing binary'
use-case, as we pass it an executable name, and then the code will turn
it into a full path by prepending constants.BinDir() when needed.
This in particular means that all the binaries must be in the same
directory. This does not have to be true when using an installer.

This commit reworks this by allowing to pass a full path instead of just
the binary name.
---
 pkg/crc/cache/cache.go        | 24 ++++++++++++------------
 pkg/crc/cache/cache_darwin.go |  4 +---
 pkg/crc/cache/cache_linux.go  |  2 +-
 3 files changed, 14 insertions(+), 16 deletions(-)

diff --git a/pkg/crc/cache/cache.go b/pkg/crc/cache/cache.go
index 364503e36..c1931760c 100644
--- a/pkg/crc/cache/cache.go
+++ b/pkg/crc/cache/cache.go
@@ -17,7 +17,7 @@ import (
 )
 
 type Cache struct {
-	executableName string
+	executablePath string
 	archiveURL     string
 	destDir        string
 	version        string
@@ -34,16 +34,16 @@ func (e *VersionMismatchError) Error() string {
 	return fmt.Sprintf("%s version mismatch: %s expected but %s found in the cache", e.ExecutableName, e.ExpectedVersion, e.CurrentVersion)
 }
 
-func New(executableName string, archiveURL string, version string, getVersion func(string) (string, error)) *Cache {
-	return &Cache{executableName: executableName, archiveURL: archiveURL, destDir: constants.BinDir(), version: version, getVersion: getVersion}
+func New(executablePath string, archiveURL string, version string, getVersion func(string) (string, error)) *Cache {
+	return &Cache{executablePath: executablePath, archiveURL: archiveURL, destDir: constants.BinDir(), version: version, getVersion: getVersion}
 }
 
 func (c *Cache) GetExecutablePath() string {
-	return filepath.Join(c.destDir, c.executableName)
+	return c.executablePath
 }
 
 func (c *Cache) GetExecutableName() string {
-	return c.executableName
+	return filepath.Base(c.executablePath)
 }
 
 /* getVersionGeneric runs the cached executable with 'args', and assumes the version string
@@ -69,7 +69,7 @@ func getVersionGeneric(executablePath string, args ...string) (string, error) {
 func NewAdminHelperCache() *Cache {
 	url := constants.GetAdminHelperURL()
 	version := version.GetAdminHelperVersion()
-	return New(constants.GetAdminHelperExecutable(),
+	return New(constants.AdminHelperPath(),
 		url,
 		version,
 		func(executable string) (string, error) {
@@ -122,14 +122,14 @@ func (c *Cache) CacheExecutable() error {
 	if IsTarball(assetTmpFile) {
 		// Extract the tarball and put it the cache directory.
 		extractedFiles, err = extract.UncompressWithFilter(assetTmpFile, tmpDir, false,
-			func(filename string) bool { return filepath.Base(filename) == c.executableName })
+			func(filename string) bool { return filepath.Base(filename) == c.GetExecutableName() })
 		if err != nil {
 			return errors.Wrapf(err, "Cannot uncompress '%s'", assetTmpFile)
 		}
 	} else {
 		extractedFiles = append(extractedFiles, assetTmpFile)
-		if filepath.Base(assetTmpFile) != c.executableName {
-			logging.Warnf("Executable name is %s but extracted file name is %s", c.executableName, filepath.Base(assetTmpFile))
+		if filepath.Base(assetTmpFile) != c.GetExecutableName() {
+			logging.Warnf("Executable name is %s but extracted file name is %s", c.GetExecutableName(), filepath.Base(assetTmpFile))
 		}
 	}
 
@@ -153,7 +153,7 @@ func (c *Cache) CacheExecutable() error {
 }
 
 func (c *Cache) getExecutable(destDir string) (string, error) {
-	logging.Debugf("Trying to extract %s from crc executable", c.executableName)
+	logging.Debugf("Trying to extract %s from crc executable", c.GetExecutableName())
 	archiveName := filepath.Base(c.archiveURL)
 	destPath := filepath.Join(destDir, archiveName)
 	err := embed.Extract(archiveName, destPath)
@@ -175,14 +175,14 @@ func (c *Cache) CheckVersion() error {
 	}
 	if currentVersion != c.version {
 		err := &VersionMismatchError{
-			ExecutableName:  c.executableName,
+			ExecutableName:  c.GetExecutableName(),
 			CurrentVersion:  currentVersion,
 			ExpectedVersion: c.version,
 		}
 		logging.Debugf("%s", err.Error())
 		return err
 	}
-	logging.Debugf("Found %s version %s", c.executableName, c.version)
+	logging.Debugf("Found %s version %s", c.GetExecutableName(), c.version)
 	return nil
 }
 
diff --git a/pkg/crc/cache/cache_darwin.go b/pkg/crc/cache/cache_darwin.go
index f1482390b..4a61e86ef 100644
--- a/pkg/crc/cache/cache_darwin.go
+++ b/pkg/crc/cache/cache_darwin.go
@@ -1,13 +1,11 @@
 package cache
 
 import (
-	"path/filepath"
-
 	"github.com/crc-org/crc/pkg/crc/machine/vfkit"
 )
 
 func NewVfkitCache() *Cache {
-	return New(filepath.Base(vfkit.ExecutablePath()), vfkit.VfkitDownloadURL, vfkit.VfkitVersion, getVfkitVersion)
+	return New(vfkit.ExecutablePath(), vfkit.VfkitDownloadURL, vfkit.VfkitVersion, getVfkitVersion)
 }
 
 func getVfkitVersion(executablePath string) (string, error) {
diff --git a/pkg/crc/cache/cache_linux.go b/pkg/crc/cache/cache_linux.go
index b54b811a1..a46420db4 100644
--- a/pkg/crc/cache/cache_linux.go
+++ b/pkg/crc/cache/cache_linux.go
@@ -5,7 +5,7 @@ import (
 )
 
 func NewMachineDriverLibvirtCache() *Cache {
-	return New(libvirt.MachineDriverCommand, libvirt.MachineDriverDownloadURL, libvirt.MachineDriverVersion, getCurrentLibvirtDriverVersion)
+	return New(libvirt.MachineDriverPath(), libvirt.MachineDriverDownloadURL, libvirt.MachineDriverVersion, getCurrentLibvirtDriverVersion)
 }
 
 func getCurrentLibvirtDriverVersion(executablePath string) (string, error) {
-- 
2.39.0


From 7ebf1a22ad452f59f4eda33c32fcedcf71cd65f0 Mon Sep 17 00:00:00 2001
From: Christophe Fergeau <cfergeau@redhat.com>
Date: Fri, 6 Jan 2023 13:40:44 +0100
Subject: [PATCH 06/16] cache: Remove Cache.destDir

It's always set to constants.BinDir() and is only used in
CacheExecutable(), we can directly use constants.BinDir() there.
---
 pkg/crc/cache/cache.go | 7 +++----
 1 file changed, 3 insertions(+), 4 deletions(-)

diff --git a/pkg/crc/cache/cache.go b/pkg/crc/cache/cache.go
index c1931760c..3096ec615 100644
--- a/pkg/crc/cache/cache.go
+++ b/pkg/crc/cache/cache.go
@@ -19,7 +19,6 @@ import (
 type Cache struct {
 	executablePath string
 	archiveURL     string
-	destDir        string
 	version        string
 	getVersion     func(string) (string, error)
 }
@@ -35,7 +34,7 @@ func (e *VersionMismatchError) Error() string {
 }
 
 func New(executablePath string, archiveURL string, version string, getVersion func(string) (string, error)) *Cache {
-	return &Cache{executablePath: executablePath, archiveURL: archiveURL, destDir: constants.BinDir(), version: version, getVersion: getVersion}
+	return &Cache{executablePath: executablePath, archiveURL: archiveURL, version: version, getVersion: getVersion}
 }
 
 func (c *Cache) GetExecutablePath() string {
@@ -134,13 +133,13 @@ func (c *Cache) CacheExecutable() error {
 	}
 
 	// Copy the requested asset into its final destination
-	err = os.MkdirAll(c.destDir, 0750)
+	err = os.MkdirAll(constants.BinDir(), 0750)
 	if err != nil {
 		return errors.Wrap(err, "cannot create the target directory")
 	}
 
 	for _, extractedFilePath := range extractedFiles {
-		finalExecutablePath := filepath.Join(c.destDir, filepath.Base(extractedFilePath))
+		finalExecutablePath := filepath.Join(constants.BinDir(), filepath.Base(extractedFilePath))
 		// If the file exists then remove it (ignore error) first before copy because with `0500` permission
 		// it is not possible to overwrite the file.
 		os.Remove(finalExecutablePath)
-- 
2.39.0


From 24ab3377effc4ecbea61bae3412d1b556e70a970 Mon Sep 17 00:00:00 2001
From: Christophe Fergeau <cfergeau@redhat.com>
Date: Fri, 6 Jan 2023 13:42:21 +0100
Subject: [PATCH 07/16] cache: Remove unneeded os.Mkdir call from
 CacheExecutable

constants.EnsureBaseDirectoryExists() already takes care of this.
---
 pkg/crc/cache/cache.go | 5 -----
 1 file changed, 5 deletions(-)

diff --git a/pkg/crc/cache/cache.go b/pkg/crc/cache/cache.go
index 3096ec615..8f95a173c 100644
--- a/pkg/crc/cache/cache.go
+++ b/pkg/crc/cache/cache.go
@@ -133,11 +133,6 @@ func (c *Cache) CacheExecutable() error {
 	}
 
 	// Copy the requested asset into its final destination
-	err = os.MkdirAll(constants.BinDir(), 0750)
-	if err != nil {
-		return errors.Wrap(err, "cannot create the target directory")
-	}
-
 	for _, extractedFilePath := range extractedFiles {
 		finalExecutablePath := filepath.Join(constants.BinDir(), filepath.Base(extractedFilePath))
 		// If the file exists then remove it (ignore error) first before copy because with `0500` permission
-- 
2.39.0


From 2cbea6a30c4d8030497c0d941ba5296238ed0162 Mon Sep 17 00:00:00 2001
From: Christophe Fergeau <cfergeau@redhat.com>
Date: Fri, 6 Jan 2023 13:51:32 +0100
Subject: [PATCH 08/16] cache: Unexport a few private methods/functions

---
 pkg/crc/cache/cache.go        | 12 ++++++------
 pkg/crc/cache/cache_darwin.go |  2 +-
 pkg/crc/cache/cache_linux.go  |  2 +-
 3 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/pkg/crc/cache/cache.go b/pkg/crc/cache/cache.go
index 8f95a173c..6f2d9d0f6 100644
--- a/pkg/crc/cache/cache.go
+++ b/pkg/crc/cache/cache.go
@@ -33,7 +33,7 @@ func (e *VersionMismatchError) Error() string {
 	return fmt.Sprintf("%s version mismatch: %s expected but %s found in the cache", e.ExecutableName, e.ExpectedVersion, e.CurrentVersion)
 }
 
-func New(executablePath string, archiveURL string, version string, getVersion func(string) (string, error)) *Cache {
+func new(executablePath string, archiveURL string, version string, getVersion func(string) (string, error)) *Cache {
 	return &Cache{executablePath: executablePath, archiveURL: archiveURL, version: version, getVersion: getVersion}
 }
 
@@ -68,7 +68,7 @@ func getVersionGeneric(executablePath string, args ...string) (string, error) {
 func NewAdminHelperCache() *Cache {
 	url := constants.GetAdminHelperURL()
 	version := version.GetAdminHelperVersion()
-	return New(constants.AdminHelperPath(),
+	return new(constants.AdminHelperPath(),
 		url,
 		version,
 		func(executable string) (string, error) {
@@ -94,13 +94,13 @@ func (c *Cache) EnsureIsCached() error {
 		if version.IsInstaller() {
 			return fmt.Errorf("%s could not be found - check your installation", c.GetExecutablePath())
 		}
-		return c.CacheExecutable()
+		return c.cacheExecutable()
 	}
 	return nil
 }
 
 // CacheExecutable downloads and caches the requested executable into the CRC directory
-func (c *Cache) CacheExecutable() error {
+func (c *Cache) cacheExecutable() error {
 	if c.IsCached() && c.CheckVersion() == nil {
 		return nil
 	}
@@ -118,7 +118,7 @@ func (c *Cache) CacheExecutable() error {
 
 	var extractedFiles []string
 	// Check the file is tarball or not
-	if IsTarball(assetTmpFile) {
+	if isTarball(assetTmpFile) {
 		// Extract the tarball and put it the cache directory.
 		extractedFiles, err = extract.UncompressWithFilter(assetTmpFile, tmpDir, false,
 			func(filename string) bool { return filepath.Base(filename) == c.GetExecutableName() })
@@ -180,7 +180,7 @@ func (c *Cache) CheckVersion() error {
 	return nil
 }
 
-func IsTarball(filename string) bool {
+func isTarball(filename string) bool {
 	tarballExtensions := []string{".tar", ".tar.gz", ".tar.xz", ".zip", ".tar.bz2", ".crcbundle"}
 	for _, extension := range tarballExtensions {
 		if strings.HasSuffix(strings.ToLower(filename), extension) {
diff --git a/pkg/crc/cache/cache_darwin.go b/pkg/crc/cache/cache_darwin.go
index 4a61e86ef..e6f9e30fc 100644
--- a/pkg/crc/cache/cache_darwin.go
+++ b/pkg/crc/cache/cache_darwin.go
@@ -5,7 +5,7 @@ import (
 )
 
 func NewVfkitCache() *Cache {
-	return New(vfkit.ExecutablePath(), vfkit.VfkitDownloadURL, vfkit.VfkitVersion, getVfkitVersion)
+	return new(vfkit.ExecutablePath(), vfkit.VfkitDownloadURL, vfkit.VfkitVersion, getVfkitVersion)
 }
 
 func getVfkitVersion(executablePath string) (string, error) {
diff --git a/pkg/crc/cache/cache_linux.go b/pkg/crc/cache/cache_linux.go
index a46420db4..dd4f4e535 100644
--- a/pkg/crc/cache/cache_linux.go
+++ b/pkg/crc/cache/cache_linux.go
@@ -5,7 +5,7 @@ import (
 )
 
 func NewMachineDriverLibvirtCache() *Cache {
-	return New(libvirt.MachineDriverPath(), libvirt.MachineDriverDownloadURL, libvirt.MachineDriverVersion, getCurrentLibvirtDriverVersion)
+	return new(libvirt.MachineDriverPath(), libvirt.MachineDriverDownloadURL, libvirt.MachineDriverVersion, getCurrentLibvirtDriverVersion)
 }
 
 func getCurrentLibvirtDriverVersion(executablePath string) (string, error) {
-- 
2.39.0


From 5827bd310231e29ef3cdd51b06263b053bf83772 Mon Sep 17 00:00:00 2001
From: Christophe Fergeau <cfergeau@redhat.com>
Date: Mon, 9 Jan 2023 13:36:01 +0100
Subject: [PATCH 09/16] build: Use 'go generate' for compile time parameters

For macOS brew builds, I need a way to specify the path to the vfkit and
crc-admin-helper binaries. This commit adds a way to pass a json file at
build time, which will be used to autogenerate the
pkg/version/helpers_generated.go file.
This file contains a binary name/binary path list.

The path to the json file specified through the env var
CRC_BUILD_PARAMS_PATH.
This json file has the following format:

$ cat build-params.json
[
        {
                "name": "crc-admin-helper",
                "path": "/usr/libexec/crc-admin-helper"
        },
        {
                "name": "vfkit",
                "path": "/usr/bin/vfkit"
        }
]

See
https://blog.carlmjohnson.net/post/2016-11-27-how-to-use-go-generate/
for more details about this approach of using go generate for build time
configuration
---
 Makefile                             |  4 ++
 pkg/crc/version/genbuildparams.go    | 89 ++++++++++++++++++++++++++++
 pkg/crc/version/helpers_generated.go | 11 ++++
 pkg/crc/version/version.go           |  2 +
 4 files changed, 106 insertions(+)
 create mode 100644 pkg/crc/version/genbuildparams.go
 create mode 100644 pkg/crc/version/helpers_generated.go

diff --git a/Makefile b/Makefile
index ccd442472..cec8930a8 100644
--- a/Makefile
+++ b/Makefile
@@ -90,15 +90,19 @@ install: $(SOURCES)
 	go install -tags "$(BUILDTAGS)"  -ldflags="$(LDFLAGS)" $(GO_EXTRA_BUILDFLAGS) ./cmd/crc
 
 $(BUILD_DIR)/macos-amd64/crc: $(SOURCES)
+	go generate ./pkg/crc/version
 	GOARCH=amd64 GOOS=darwin go build -tags "$(BUILDTAGS)" -ldflags="$(LDFLAGS)" -o $(BUILD_DIR)/macos-amd64/crc $(GO_EXTRA_BUILDFLAGS) ./cmd/crc
 
 $(BUILD_DIR)/macos-arm64/crc: $(SOURCES)
+	go generate ./pkg/crc/version
 	GOARCH=arm64 GOOS=darwin go build -tags "$(BUILDTAGS)" -ldflags="$(LDFLAGS)" -o $(BUILD_DIR)/macos-arm64/crc $(GO_EXTRA_BUILDFLAGS) ./cmd/crc
 
 $(BUILD_DIR)/linux-amd64/crc: $(SOURCES)
+	go generate ./pkg/crc/version
 	GOOS=linux GOARCH=amd64 go build -tags "$(BUILDTAGS)" -ldflags="$(LDFLAGS)" -o $(BUILD_DIR)/linux-amd64/crc $(GO_EXTRA_BUILDFLAGS) ./cmd/crc
 
 $(BUILD_DIR)/windows-amd64/crc.exe: $(SOURCES)
+	go generate ./pkg/crc/version
 	GOARCH=amd64 GOOS=windows go build -tags "$(BUILDTAGS)" -ldflags="$(LDFLAGS)" -o $(BUILD_DIR)/windows-amd64/crc.exe $(GO_EXTRA_BUILDFLAGS) ./cmd/crc
 
 $(HOST_BUILD_DIR)/crc-embedder: $(SOURCES)
diff --git a/pkg/crc/version/genbuildparams.go b/pkg/crc/version/genbuildparams.go
new file mode 100644
index 000000000..3138c0476
--- /dev/null
+++ b/pkg/crc/version/genbuildparams.go
@@ -0,0 +1,89 @@
+//go:build genbuildparams
+// +build genbuildparams
+
+// This program generates pkg/version/helper-paths.go and is invoked through
+// 'go generate'
+
+package main
+
+import (
+	"encoding/json"
+	"fmt"
+	"log"
+	"os"
+	"text/template"
+)
+
+type Helper struct {
+	Name string
+	Path string
+}
+
+func parseBuildParams() ([]Helper, error) {
+	var helpers []Helper
+	if len(os.Args) > 2 {
+		return nil, fmt.Errorf("Too many arguments (%d)", len(os.Args))
+	}
+	if len(os.Args) == 1 || (len(os.Args) == 2 && os.Args[1] == "") {
+		return helpers, nil
+	}
+	jsonData, err := os.ReadFile(os.Args[1]) // the file is inside the local directory
+	if err != nil {
+		return nil, err
+	}
+	err = json.Unmarshal(jsonData, &helpers)
+	if err != nil {
+		return nil, err
+	}
+
+	return helpers, err
+}
+
+func generateCode(filename string, helpers []Helper) error {
+	f, err := os.Create(filename)
+	if err != nil {
+		return err
+	}
+	defer f.Close()
+
+	packageTemplate.Execute(f, struct {
+		Helpers []Helper
+	}{
+		Helpers: helpers,
+	})
+
+	return nil
+}
+
+func main() {
+	helpers, err := parseBuildParams()
+	die(err)
+
+	err = generateCode("helpers_generated.go", helpers)
+	die(err)
+}
+
+func die(err error) {
+	if err != nil {
+		log.Fatalf("gen-build-parameters failed: %v", err)
+	}
+}
+
+var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.
+// This file was generated by gen-build-parameters
+package version
+
+type helper struct {
+	name string
+	path string
+}
+
+var helpers = []helper{
+{{- range .Helpers }}
+	{
+		name: {{ printf "%q" .Name }},
+		path: {{ printf "%q" .Path }},
+	},
+{{- end }}
+}
+`))
diff --git a/pkg/crc/version/helpers_generated.go b/pkg/crc/version/helpers_generated.go
new file mode 100644
index 000000000..2aa32d7dd
--- /dev/null
+++ b/pkg/crc/version/helpers_generated.go
@@ -0,0 +1,11 @@
+// Code generated by go generate; DO NOT EDIT.
+// This file was generated by gen-build-parameters
+package version
+
+type helper struct {
+	name string
+	path string
+}
+
+var helpers = []helper{
+}
diff --git a/pkg/crc/version/version.go b/pkg/crc/version/version.go
index 969be5c0b..5f9cda2f2 100644
--- a/pkg/crc/version/version.go
+++ b/pkg/crc/version/version.go
@@ -14,6 +14,8 @@ import (
 	crcPreset "github.com/crc-org/crc/pkg/crc/preset"
 )
 
+//go:generate go run -tags genbuildparams ./genbuildparams.go $CRC_BUILD_PARAMS_PATH
+
 // The following variables are private fields and should be set when compiling with ldflags, for example --ldflags="-X github.com/crc-org/crc/pkg/version.crcVersion=vX.Y.Z
 var (
 	// The current version of minishift
-- 
2.39.0


From fab4e1eb2bb2c0feb0bbee3091d929b437c69144 Mon Sep 17 00:00:00 2001
From: Christophe Fergeau <cfergeau@redhat.com>
Date: Fri, 6 Jan 2023 17:40:35 +0100
Subject: [PATCH 10/16] constants: Add ResolveHelperPath() helper

At the moment, helper files (vfkit, crc-admin-helper,
crc-driver-libvirt) are expected to all be found in BinDir().
BinDir() is either the installation directory if we made a release
build, or ~/.crc/bin if  built from git.
However, this is not flexible enough for homebrew where vfkit and
crc-admin-helper will be in 2 different directories.

After the previous commits, we now have higher-level helpers
(vfkit.ExecutablePath(), constants.AdminHelperPath(), ...), and a way to
provide the path to these helpers at compile time.

This commit adds a constants.ResolveHelperPath() function which:
- uses the path specified at compile-time for the helper if available
- uses BinDir() as before if not

This will allow to build crc binaries on homebrew.
---
 pkg/crc/constants/constants.go       | 10 +++++++++-
 pkg/crc/machine/libvirt/constants.go |  3 +--
 pkg/crc/machine/vfkit/constants.go   |  3 +--
 pkg/crc/version/version.go           | 10 ++++++++++
 4 files changed, 21 insertions(+), 5 deletions(-)

diff --git a/pkg/crc/constants/constants.go b/pkg/crc/constants/constants.go
index 9e38a1afe..c794b4bcf 100644
--- a/pkg/crc/constants/constants.go
+++ b/pkg/crc/constants/constants.go
@@ -142,8 +142,16 @@ func BinDir() string {
 	return crcBinDir
 }
 
+func ResolveHelperPath(executableName string) string {
+	path := version.HelperPath(executableName)
+	if path != "" {
+		return path
+	}
+	return filepath.Join(BinDir(), executableName)
+}
+
 func AdminHelperPath() string {
-	return filepath.Join(BinDir(), GetAdminHelperExecutable())
+	return ResolveHelperPath(GetAdminHelperExecutable())
 }
 
 // GetHomeDir returns the home directory for the current user
diff --git a/pkg/crc/machine/libvirt/constants.go b/pkg/crc/machine/libvirt/constants.go
index c7279f85b..cdae714e2 100644
--- a/pkg/crc/machine/libvirt/constants.go
+++ b/pkg/crc/machine/libvirt/constants.go
@@ -5,7 +5,6 @@ package libvirt
 
 import (
 	"fmt"
-	"path/filepath"
 
 	"github.com/crc-org/crc/pkg/crc/constants"
 )
@@ -30,5 +29,5 @@ var (
 )
 
 func MachineDriverPath() string {
-	return filepath.Join(constants.BinDir(), MachineDriverCommand)
+	return constants.ResolveHelperPath(MachineDriverCommand)
 }
diff --git a/pkg/crc/machine/vfkit/constants.go b/pkg/crc/machine/vfkit/constants.go
index 67e5cb15f..7c2546a72 100644
--- a/pkg/crc/machine/vfkit/constants.go
+++ b/pkg/crc/machine/vfkit/constants.go
@@ -5,7 +5,6 @@ package vfkit
 
 import (
 	"fmt"
-	"path/filepath"
 
 	"github.com/crc-org/crc/pkg/crc/constants"
 )
@@ -20,5 +19,5 @@ var (
 )
 
 func ExecutablePath() string {
-	return filepath.Join(constants.BinDir(), vfkitCommand)
+	return constants.ResolveHelperPath(vfkitCommand)
 }
diff --git a/pkg/crc/version/version.go b/pkg/crc/version/version.go
index 5f9cda2f2..ef1fcddeb 100644
--- a/pkg/crc/version/version.go
+++ b/pkg/crc/version/version.go
@@ -138,3 +138,13 @@ func GetCRCLatestVersionFromMirror(transport http.RoundTripper) (*CrcReleaseInfo
 
 	return &releaseInfo, nil
 }
+
+func HelperPath(executableName string) string {
+	for _, helper := range helpers {
+		if helper.name == executableName {
+			return helper.path
+		}
+	}
+
+	return ""
+}
-- 
2.39.0


From a928ed2fee756f3ec1404b7a54d1a67890022711 Mon Sep 17 00:00:00 2001
From: Christophe Fergeau <cfergeau@redhat.com>
Date: Mon, 9 Jan 2023 17:43:23 +0100
Subject: [PATCH 11/16] preflight: Split cache and suid admin-helper checks

When using homebrew to install crc, crc-admin-helper will be built and
installed by homebrew. In this scenario, the preflight checks only
verify that crc-admin-helper and vfkit are in the expected locations,
and return an error if not.

However, these same checks also verify crc-admin-helper ownership/setuid
status. Since homebrew won't install setuid binaries, this commit
separates these checks from the 'is it cached?' ones to make
crc-admin-helper setuid if needed.
---
 pkg/crc/preflight/preflight_checks_unix.go | 22 +++++++++++++++++++---
 pkg/crc/preflight/preflight_linux_test.go  | 12 ++++++++++++
 2 files changed, 31 insertions(+), 3 deletions(-)

diff --git a/pkg/crc/preflight/preflight_checks_unix.go b/pkg/crc/preflight/preflight_checks_unix.go
index 074293d3f..38cc8646e 100644
--- a/pkg/crc/preflight/preflight_checks_unix.go
+++ b/pkg/crc/preflight/preflight_checks_unix.go
@@ -46,6 +46,15 @@ func genericPreflightChecks(preset crcpreset.Preset) []Check {
 
 			labels: None,
 		},
+		{
+			configKeySuffix:  "check-admin-helper-suid",
+			checkDescription: "Checking if crc-admin-helper executable is suid",
+			check:            checkAdminHelperSuid,
+			fixDescription:   "Making crc-admin-helper executable suid",
+			fix:              fixAdminHelperSuid,
+
+			labels: None,
+		},
 		{
 			configKeySuffix:  "check-obsolete-admin-helper",
 			checkDescription: "Checking for obsolete admin-helper executable",
@@ -127,7 +136,6 @@ func checkSuid(path string) error {
 	return nil
 }
 
-// Check if helper executable is cached or not
 func checkAdminHelperExecutableCached() error {
 	if version.IsInstaller() {
 		return nil
@@ -141,7 +149,7 @@ func checkAdminHelperExecutableCached() error {
 		return errors.Wrap(err, "unexpected version of the crc-admin-helper executable")
 	}
 	logging.Debug("crc-admin-helper executable already cached")
-	return checkSuid(helper.GetExecutablePath())
+	return nil
 }
 
 func fixAdminHelperExecutableCached() error {
@@ -154,7 +162,15 @@ func fixAdminHelperExecutableCached() error {
 		return errors.Wrap(err, "Unable to download crc-admin-helper executable")
 	}
 	logging.Debug("crc-admin-helper executable cached")
-	return setSuid(helper.GetExecutablePath())
+	return nil
+}
+
+func checkAdminHelperSuid() error {
+	return checkSuid(constants.AdminHelperPath())
+}
+
+func fixAdminHelperSuid() error {
+	return setSuid(constants.AdminHelperPath())
 }
 
 var oldAdminHelpers = []string{"admin-helper-linux", "admin-helper-darwin"}
diff --git a/pkg/crc/preflight/preflight_linux_test.go b/pkg/crc/preflight/preflight_linux_test.go
index ddf1218d3..bdaef8e56 100644
--- a/pkg/crc/preflight/preflight_linux_test.go
+++ b/pkg/crc/preflight/preflight_linux_test.go
@@ -67,6 +67,7 @@ var checkListForDistros = []checkListForDistro{
 			{check: checkIfRunningAsNormalUser},
 			{check: checkRunningInsideWSL2},
 			{check: checkAdminHelperExecutableCached},
+			{check: checkAdminHelperSuid},
 			{check: checkOldAdminHelperExecutableCached},
 			{check: checkSupportedCPUArch},
 			{configKeySuffix: "check-ram"},
@@ -106,6 +107,7 @@ var checkListForDistros = []checkListForDistro{
 			{check: checkIfRunningAsNormalUser},
 			{check: checkRunningInsideWSL2},
 			{check: checkAdminHelperExecutableCached},
+			{check: checkAdminHelperSuid},
 			{check: checkOldAdminHelperExecutableCached},
 			{check: checkSupportedCPUArch},
 			{configKeySuffix: "check-ram"},
@@ -144,6 +146,7 @@ var checkListForDistros = []checkListForDistro{
 			{check: checkIfRunningAsNormalUser},
 			{check: checkRunningInsideWSL2},
 			{check: checkAdminHelperExecutableCached},
+			{check: checkAdminHelperSuid},
 			{check: checkOldAdminHelperExecutableCached},
 			{check: checkSupportedCPUArch},
 			{configKeySuffix: "check-ram"},
@@ -176,6 +179,7 @@ var checkListForDistros = []checkListForDistro{
 			{check: checkIfRunningAsNormalUser},
 			{check: checkRunningInsideWSL2},
 			{check: checkAdminHelperExecutableCached},
+			{check: checkAdminHelperSuid},
 			{check: checkOldAdminHelperExecutableCached},
 			{check: checkSupportedCPUArch},
 			{configKeySuffix: "check-ram"},
@@ -215,6 +219,7 @@ var checkListForDistros = []checkListForDistro{
 			{check: checkIfRunningAsNormalUser},
 			{check: checkRunningInsideWSL2},
 			{check: checkAdminHelperExecutableCached},
+			{check: checkAdminHelperSuid},
 			{check: checkOldAdminHelperExecutableCached},
 			{check: checkSupportedCPUArch},
 			{configKeySuffix: "check-ram"},
@@ -253,6 +258,7 @@ var checkListForDistros = []checkListForDistro{
 			{check: checkIfRunningAsNormalUser},
 			{check: checkRunningInsideWSL2},
 			{check: checkAdminHelperExecutableCached},
+			{check: checkAdminHelperSuid},
 			{check: checkOldAdminHelperExecutableCached},
 			{check: checkSupportedCPUArch},
 			{configKeySuffix: "check-ram"},
@@ -285,6 +291,7 @@ var checkListForDistros = []checkListForDistro{
 			{check: checkIfRunningAsNormalUser},
 			{check: checkRunningInsideWSL2},
 			{check: checkAdminHelperExecutableCached},
+			{check: checkAdminHelperSuid},
 			{check: checkOldAdminHelperExecutableCached},
 			{check: checkSupportedCPUArch},
 			{configKeySuffix: "check-ram"},
@@ -324,6 +331,7 @@ var checkListForDistros = []checkListForDistro{
 			{check: checkIfRunningAsNormalUser},
 			{check: checkRunningInsideWSL2},
 			{check: checkAdminHelperExecutableCached},
+			{check: checkAdminHelperSuid},
 			{check: checkOldAdminHelperExecutableCached},
 			{check: checkSupportedCPUArch},
 			{configKeySuffix: "check-ram"},
@@ -362,6 +370,7 @@ var checkListForDistros = []checkListForDistro{
 			{check: checkIfRunningAsNormalUser},
 			{check: checkRunningInsideWSL2},
 			{check: checkAdminHelperExecutableCached},
+			{check: checkAdminHelperSuid},
 			{check: checkOldAdminHelperExecutableCached},
 			{check: checkSupportedCPUArch},
 			{configKeySuffix: "check-ram"},
@@ -394,6 +403,7 @@ var checkListForDistros = []checkListForDistro{
 			{check: checkIfRunningAsNormalUser},
 			{check: checkRunningInsideWSL2},
 			{check: checkAdminHelperExecutableCached},
+			{check: checkAdminHelperSuid},
 			{check: checkOldAdminHelperExecutableCached},
 			{check: checkSupportedCPUArch},
 			{configKeySuffix: "check-ram"},
@@ -434,6 +444,7 @@ var checkListForDistros = []checkListForDistro{
 			{check: checkIfRunningAsNormalUser},
 			{check: checkRunningInsideWSL2},
 			{check: checkAdminHelperExecutableCached},
+			{check: checkAdminHelperSuid},
 			{check: checkOldAdminHelperExecutableCached},
 			{check: checkSupportedCPUArch},
 			{configKeySuffix: "check-ram"},
@@ -473,6 +484,7 @@ var checkListForDistros = []checkListForDistro{
 			{check: checkIfRunningAsNormalUser},
 			{check: checkRunningInsideWSL2},
 			{check: checkAdminHelperExecutableCached},
+			{check: checkAdminHelperSuid},
 			{check: checkOldAdminHelperExecutableCached},
 			{check: checkSupportedCPUArch},
 			{configKeySuffix: "check-ram"},
-- 
2.39.0


From 830e594f765ee0b6f3a1c34c3d49bff791f40d8f Mon Sep 17 00:00:00 2001
From: Christophe Fergeau <cfergeau@redhat.com>
Date: Tue, 10 Jan 2023 10:05:15 +0100
Subject: [PATCH 12/16] preflight: Remove 'old admin helper' checks

They were added 1.5 years ago, and scheduled for removal after "a few
releases". Even if the old binaries stay around, this should not cause
issues as crc won't try to use them.
This reverts 60e11bd46dc211b802d387cc31eb6e20259514bc
---
 pkg/crc/preflight/preflight_checks_unix.go | 41 ----------------------
 pkg/crc/preflight/preflight_linux_test.go  | 12 -------
 2 files changed, 53 deletions(-)

diff --git a/pkg/crc/preflight/preflight_checks_unix.go b/pkg/crc/preflight/preflight_checks_unix.go
index 38cc8646e..563a231c0 100644
--- a/pkg/crc/preflight/preflight_checks_unix.go
+++ b/pkg/crc/preflight/preflight_checks_unix.go
@@ -55,13 +55,6 @@ func genericPreflightChecks(preset crcpreset.Preset) []Check {
 
 			labels: None,
 		},
-		{
-			configKeySuffix:  "check-obsolete-admin-helper",
-			checkDescription: "Checking for obsolete admin-helper executable",
-			check:            checkOldAdminHelperExecutableCached,
-			fixDescription:   "Removing obsolete admin-helper executable",
-			fix:              fixOldAdminHelperExecutableCached,
-		},
 		{
 			configKeySuffix:  "check-supported-cpu-arch",
 			checkDescription: "Checking if running on a supported CPU architecture",
@@ -173,40 +166,6 @@ func fixAdminHelperSuid() error {
 	return setSuid(constants.AdminHelperPath())
 }
 
-var oldAdminHelpers = []string{"admin-helper-linux", "admin-helper-darwin"}
-
-/* These 2 checks can be removed after a few releases */
-func checkOldAdminHelperExecutableCached() error {
-	logging.Debugf("Checking if an older admin-helper executable is installed")
-	for _, oldExecutable := range oldAdminHelpers {
-		oldPath := filepath.Join(constants.BinDir(), oldExecutable)
-		if _, err := os.Stat(oldPath); !os.IsNotExist(err) {
-			return fmt.Errorf("Found old admin-helper executable '%s'", oldExecutable)
-		}
-	}
-
-	logging.Debugf("No older admin-helper executable found")
-
-	return nil
-}
-
-func fixOldAdminHelperExecutableCached() error {
-	logging.Debugf("Removing older admin-helper executable")
-	for _, oldExecutable := range oldAdminHelpers {
-		oldPath := filepath.Join(constants.BinDir(), oldExecutable)
-		if err := os.Remove(oldPath); err != nil {
-			if !os.IsNotExist(err) {
-				logging.Debugf("Failed to remove  %s: %v", oldPath, err)
-				return err
-			}
-		} else {
-			logging.Debugf("Successfully removed %s", oldPath)
-		}
-	}
-
-	return nil
-}
-
 func checkSupportedCPUArch() error {
 	logging.Debugf("GOARCH is %s GOOS is %s", runtime.GOARCH, runtime.GOOS)
 	// Only supported arches are amd64, and arm64 on macOS
diff --git a/pkg/crc/preflight/preflight_linux_test.go b/pkg/crc/preflight/preflight_linux_test.go
index bdaef8e56..6ff5f8d45 100644
--- a/pkg/crc/preflight/preflight_linux_test.go
+++ b/pkg/crc/preflight/preflight_linux_test.go
@@ -68,7 +68,6 @@ var checkListForDistros = []checkListForDistro{
 			{check: checkRunningInsideWSL2},
 			{check: checkAdminHelperExecutableCached},
 			{check: checkAdminHelperSuid},
-			{check: checkOldAdminHelperExecutableCached},
 			{check: checkSupportedCPUArch},
 			{configKeySuffix: "check-ram"},
 			{check: checkCrcSymlink},
@@ -108,7 +107,6 @@ var checkListForDistros = []checkListForDistro{
 			{check: checkRunningInsideWSL2},
 			{check: checkAdminHelperExecutableCached},
 			{check: checkAdminHelperSuid},
-			{check: checkOldAdminHelperExecutableCached},
 			{check: checkSupportedCPUArch},
 			{configKeySuffix: "check-ram"},
 			{check: checkCrcSymlink},
@@ -147,7 +145,6 @@ var checkListForDistros = []checkListForDistro{
 			{check: checkRunningInsideWSL2},
 			{check: checkAdminHelperExecutableCached},
 			{check: checkAdminHelperSuid},
-			{check: checkOldAdminHelperExecutableCached},
 			{check: checkSupportedCPUArch},
 			{configKeySuffix: "check-ram"},
 			{check: checkCrcSymlink},
@@ -180,7 +177,6 @@ var checkListForDistros = []checkListForDistro{
 			{check: checkRunningInsideWSL2},
 			{check: checkAdminHelperExecutableCached},
 			{check: checkAdminHelperSuid},
-			{check: checkOldAdminHelperExecutableCached},
 			{check: checkSupportedCPUArch},
 			{configKeySuffix: "check-ram"},
 			{check: checkCrcSymlink},
@@ -220,7 +216,6 @@ var checkListForDistros = []checkListForDistro{
 			{check: checkRunningInsideWSL2},
 			{check: checkAdminHelperExecutableCached},
 			{check: checkAdminHelperSuid},
-			{check: checkOldAdminHelperExecutableCached},
 			{check: checkSupportedCPUArch},
 			{configKeySuffix: "check-ram"},
 			{check: checkCrcSymlink},
@@ -259,7 +254,6 @@ var checkListForDistros = []checkListForDistro{
 			{check: checkRunningInsideWSL2},
 			{check: checkAdminHelperExecutableCached},
 			{check: checkAdminHelperSuid},
-			{check: checkOldAdminHelperExecutableCached},
 			{check: checkSupportedCPUArch},
 			{configKeySuffix: "check-ram"},
 			{check: checkCrcSymlink},
@@ -292,7 +286,6 @@ var checkListForDistros = []checkListForDistro{
 			{check: checkRunningInsideWSL2},
 			{check: checkAdminHelperExecutableCached},
 			{check: checkAdminHelperSuid},
-			{check: checkOldAdminHelperExecutableCached},
 			{check: checkSupportedCPUArch},
 			{configKeySuffix: "check-ram"},
 			{check: checkCrcSymlink},
@@ -332,7 +325,6 @@ var checkListForDistros = []checkListForDistro{
 			{check: checkRunningInsideWSL2},
 			{check: checkAdminHelperExecutableCached},
 			{check: checkAdminHelperSuid},
-			{check: checkOldAdminHelperExecutableCached},
 			{check: checkSupportedCPUArch},
 			{configKeySuffix: "check-ram"},
 			{check: checkCrcSymlink},
@@ -371,7 +363,6 @@ var checkListForDistros = []checkListForDistro{
 			{check: checkRunningInsideWSL2},
 			{check: checkAdminHelperExecutableCached},
 			{check: checkAdminHelperSuid},
-			{check: checkOldAdminHelperExecutableCached},
 			{check: checkSupportedCPUArch},
 			{configKeySuffix: "check-ram"},
 			{check: checkCrcSymlink},
@@ -404,7 +395,6 @@ var checkListForDistros = []checkListForDistro{
 			{check: checkRunningInsideWSL2},
 			{check: checkAdminHelperExecutableCached},
 			{check: checkAdminHelperSuid},
-			{check: checkOldAdminHelperExecutableCached},
 			{check: checkSupportedCPUArch},
 			{configKeySuffix: "check-ram"},
 			{check: checkCrcSymlink},
@@ -445,7 +435,6 @@ var checkListForDistros = []checkListForDistro{
 			{check: checkRunningInsideWSL2},
 			{check: checkAdminHelperExecutableCached},
 			{check: checkAdminHelperSuid},
-			{check: checkOldAdminHelperExecutableCached},
 			{check: checkSupportedCPUArch},
 			{configKeySuffix: "check-ram"},
 			{check: checkCrcSymlink},
@@ -485,7 +474,6 @@ var checkListForDistros = []checkListForDistro{
 			{check: checkRunningInsideWSL2},
 			{check: checkAdminHelperExecutableCached},
 			{check: checkAdminHelperSuid},
-			{check: checkOldAdminHelperExecutableCached},
 			{check: checkSupportedCPUArch},
 			{configKeySuffix: "check-ram"},
 			{check: checkCrcSymlink},
-- 
2.39.0


From c1c6a183546df7b9d547320ed34d4f71763a6af2 Mon Sep 17 00:00:00 2001
From: Christophe Fergeau <cfergeau@redhat.com>
Date: Tue, 10 Jan 2023 15:16:46 +0100
Subject: [PATCH 13/16] vfkit: Remove unused NewHost parameter

Since the vfkit machine driver is not an external driver, we don't need
to pass BinDir() to NewHost(). This is similar to what is done for the
hyperv driver in pkg/crc/machine/driver_windows.go
---
 pkg/crc/machine/driver_darwin.go | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/pkg/crc/machine/driver_darwin.go b/pkg/crc/machine/driver_darwin.go
index ffc87ab9c..43d245459 100644
--- a/pkg/crc/machine/driver_darwin.go
+++ b/pkg/crc/machine/driver_darwin.go
@@ -4,7 +4,6 @@ import (
 	"encoding/json"
 	"errors"
 
-	"github.com/crc-org/crc/pkg/crc/constants"
 	"github.com/crc-org/crc/pkg/crc/logging"
 	"github.com/crc-org/crc/pkg/crc/machine/config"
 	"github.com/crc-org/crc/pkg/crc/machine/vfkit"
@@ -19,7 +18,7 @@ func newHost(api libmachine.API, machineConfig config.MachineConfig) (*host.Host
 	if err != nil {
 		return nil, errors.New("Failed to marshal driver options")
 	}
-	return api.NewHost("vf", constants.BinDir(), json)
+	return api.NewHost("vf", "", json)
 }
 
 func loadDriverConfig(host *host.Host) (*machineVf.Driver, error) {
-- 
2.39.0


From c91d456427775c01af91cf80cbba16b9c5707bc5 Mon Sep 17 00:00:00 2001
From: Christophe Fergeau <cfergeau@redhat.com>
Date: Tue, 10 Jan 2023 15:38:05 +0100
Subject: [PATCH 14/16] constants: Remove GetAdminHelperExecutable

There's just one user left and it's in the constants package, so this
one-liner can be removed.
---
 pkg/crc/constants/constants.go | 6 +-----
 1 file changed, 1 insertion(+), 5 deletions(-)

diff --git a/pkg/crc/constants/constants.go b/pkg/crc/constants/constants.go
index c794b4bcf..3e02004c6 100644
--- a/pkg/crc/constants/constants.go
+++ b/pkg/crc/constants/constants.go
@@ -75,10 +75,6 @@ func GetAdminHelperExecutableForOs(os string) string {
 	return adminHelperExecutableForOs[os]
 }
 
-func GetAdminHelperExecutable() string {
-	return GetAdminHelperExecutableForOs(runtime.GOOS)
-}
-
 func GetAdminHelperURLForOs(os string) string {
 	return fmt.Sprintf(DefaultAdminHelperURLBase, version.GetAdminHelperVersion(), GetAdminHelperExecutableForOs(os))
 }
@@ -151,7 +147,7 @@ func ResolveHelperPath(executableName string) string {
 }
 
 func AdminHelperPath() string {
-	return ResolveHelperPath(GetAdminHelperExecutable())
+	return ResolveHelperPath(GetAdminHelperExecutableForOs(runtime.GOOS))
 }
 
 // GetHomeDir returns the home directory for the current user
-- 
2.39.0


From d74108fe313572e7fd3a2cb2e4b8f22672fac3ad Mon Sep 17 00:00:00 2001
From: Christophe Fergeau <cfergeau@redhat.com>
Date: Tue, 10 Jan 2023 15:54:24 +0100
Subject: [PATCH 15/16] libvirt: Make MachineDriverCommand private

It's only used in the libvirt package since commit 48283563b
---
 pkg/crc/machine/libvirt/constants.go | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/pkg/crc/machine/libvirt/constants.go b/pkg/crc/machine/libvirt/constants.go
index cdae714e2..60b43988d 100644
--- a/pkg/crc/machine/libvirt/constants.go
+++ b/pkg/crc/machine/libvirt/constants.go
@@ -20,14 +20,14 @@ const (
 )
 
 const (
-	MachineDriverCommand = "crc-driver-libvirt"
+	machineDriverCommand = "crc-driver-libvirt"
 	MachineDriverVersion = "0.13.5"
 )
 
 var (
-	MachineDriverDownloadURL = fmt.Sprintf("https://github.com/crc-org/machine-driver-libvirt/releases/download/%s/%s", MachineDriverVersion, MachineDriverCommand)
+	MachineDriverDownloadURL = fmt.Sprintf("https://github.com/crc-org/machine-driver-libvirt/releases/download/%s/%s", MachineDriverVersion, machineDriverCommand)
 )
 
 func MachineDriverPath() string {
-	return constants.ResolveHelperPath(MachineDriverCommand)
+	return constants.ResolveHelperPath(machineDriverCommand)
 }
-- 
2.39.0


From d89708ef1ea8f3414288b7f5abf654bd649e07bc Mon Sep 17 00:00:00 2001
From: Christophe Fergeau <cfergeau@redhat.com>
Date: Tue, 10 Jan 2023 16:04:02 +0100
Subject: [PATCH 16/16] constants: Replace BinDir() with CrcBinDir

This commit reexports CrcBinDir since the only remaining user of
BinDir() is the code downloading helpers from the net, which targets
~/.crc/bin. This code is not run in the 'IsInstaller()' case, so calling
BinDir() is odd.
---
 pkg/crc/cache/cache.go         |  2 +-
 pkg/crc/constants/constants.go | 20 ++++++++------------
 2 files changed, 9 insertions(+), 13 deletions(-)

diff --git a/pkg/crc/cache/cache.go b/pkg/crc/cache/cache.go
index 6f2d9d0f6..7fa322f13 100644
--- a/pkg/crc/cache/cache.go
+++ b/pkg/crc/cache/cache.go
@@ -134,7 +134,7 @@ func (c *Cache) cacheExecutable() error {
 
 	// Copy the requested asset into its final destination
 	for _, extractedFilePath := range extractedFiles {
-		finalExecutablePath := filepath.Join(constants.BinDir(), filepath.Base(extractedFilePath))
+		finalExecutablePath := filepath.Join(constants.CrcBinDir, filepath.Base(extractedFilePath))
 		// If the file exists then remove it (ignore error) first before copy because with `0500` permission
 		// it is not possible to overwrite the file.
 		os.Remove(finalExecutablePath)
diff --git a/pkg/crc/constants/constants.go b/pkg/crc/constants/constants.go
index 3e02004c6..db29863c1 100644
--- a/pkg/crc/constants/constants.go
+++ b/pkg/crc/constants/constants.go
@@ -114,9 +114,9 @@ func GetDefaultBundle(preset crcpreset.Preset) string {
 
 var (
 	CrcBaseDir         = filepath.Join(GetHomeDir(), ".crc")
-	crcBinDir          = filepath.Join(CrcBaseDir, "bin")
-	CrcOcBinDir        = filepath.Join(crcBinDir, "oc")
-	CrcSymlinkPath     = filepath.Join(crcBinDir, "crc")
+	CrcBinDir          = filepath.Join(CrcBaseDir, "bin")
+	CrcOcBinDir        = filepath.Join(CrcBinDir, "oc")
+	CrcSymlinkPath     = filepath.Join(CrcBinDir, "crc")
 	ConfigPath         = filepath.Join(CrcBaseDir, ConfigFile)
 	LogFilePath        = filepath.Join(CrcBaseDir, LogFile)
 	DaemonLogFilePath  = filepath.Join(CrcBaseDir, DaemonLogFile)
@@ -131,19 +131,15 @@ func GetDefaultBundlePath(preset crcpreset.Preset) string {
 	return filepath.Join(MachineCacheDir, GetDefaultBundle(preset))
 }
 
-func BinDir() string {
-	if version.IsInstaller() {
-		return version.InstallPath()
-	}
-	return crcBinDir
-}
-
 func ResolveHelperPath(executableName string) string {
 	path := version.HelperPath(executableName)
 	if path != "" {
 		return path
 	}
-	return filepath.Join(BinDir(), executableName)
+	if version.IsInstaller() {
+		return filepath.Join(version.InstallPath(), executableName)
+	}
+	return filepath.Join(CrcBinDir, executableName)
 }
 
 func AdminHelperPath() string {
@@ -161,7 +157,7 @@ func GetHomeDir() string {
 
 // EnsureBaseDirectoriesExist creates ~/.crc, ~/.crc/bin and ~/.crc/cache directories if it is not present
 func EnsureBaseDirectoriesExist() error {
-	baseDirectories := []string{CrcBaseDir, MachineCacheDir, crcBinDir}
+	baseDirectories := []string{CrcBaseDir, MachineCacheDir, CrcBinDir}
 	for _, baseDir := range baseDirectories {
 		err := os.MkdirAll(baseDir, 0750)
 		if err != nil {
-- 
2.39.0

